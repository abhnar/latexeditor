# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/wizard.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.uic import loadUi

import os
import sys
from versioncontrol import database
import getpass


class Wizard(QtWidgets.QDialog):
    outtext = ''
    def __init__(self, parent=None):
        self.parent = parent
        super().__init__(parent)
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        loadUi("ui/wizard.ui", self)
        if sys.platform == 'linux':
            self.edit_Path.setText(f'/home/{getpass.getuser()}/Desktop/')
        else:
            self.edit_Path.setText('D:\\')
        self.connections()
        self.show()

    def connections(self):
        self.pushButton_Create.clicked.connect(self.create)
        self.pushButton_Cancel.clicked.connect(self.cancel)

    def create(self):
        print()
        if(self.edit_Fname.text() == '' ): #or ' ' in self.edit_Fname.text() 
            error_dialog = QErrorMessage()
            reply = QMessageBox.warning(
            self, "Error",
            "Please enter a valid filename",
            QMessageBox.Ok)
            self.edit_Fname.setFocus()

        else:
            directory = (self.edit_Path.text() + self.edit_Fname.text() + '/').replace('\\','/')
            filename = (self.edit_Path.text() + self.edit_Fname.text() + '/' + self.edit_Fname.text() +".pax").replace('\\','/')
            os.makedirs(os.path.dirname(directory +'images/'), exist_ok=True)
            os.makedirs(os.path.dirname(directory +'drafts/'), exist_ok=True)
            os.makedirs(os.path.dirname(filename ), exist_ok=True)
            

            bibStyle = self.combo_bibStyle.currentText()
            docClass = self.combo_class.currentText()
            params = self.edit_Parameters.text()
            pkg = ''

            if self.checkBox_graphix.isChecked():
                pkg = pkg + '\\usepackage[pdftex]{graphicx}\n'
            if self.checkBox_amsmath.isChecked():
                pkg = pkg + '\\usepackage{amsmath}\n'
            if self.checkBox_amsfonts.isChecked():
                pkg = pkg + '\\usepackage{amsfonts}\n'
            if self.checkBox_color.isChecked():
                pkg = pkg + '\\usepackage{color}\n'
            if self.checkBox_algorithm2e.isChecked():
                pkg = pkg + '\\usepackage{algorithm2e}\n'
            if self.checkBox_multirow.isChecked():
                pkg = pkg + '\\usepackage{multirow}\n'
            if self.checkBox_mathtools.isChecked():
                pkg = pkg + '\\usepackage{mathtools}\n'
            if self.checkBox_cite.isChecked():
                pkg = pkg + '\\usepackage{cite}\n'


            db = database()
            db.open()
            cls_file = db.query(f"SELECT classfile from DOCCLASS where classname = '{docClass}'")
            db.close()

            with open('resources/compile/doc_classes/pre_general.txt',"r") as f:
                skeleton = f.read()

            tocopy = ''
            if not cls_file == []:
                tocopy = cls_file[0]
                skeleton = skeleton.replace("%#*%classname", tocopy)
                docClass = tocopy
            else:
                skeleton = skeleton.replace("%#*%classname", docClass)
            skeleton = skeleton.replace("%#*%bibstyle", bibStyle)
            skeleton = skeleton.replace("%#*%parameters", params)



            outtext = "" + " <<*#tex_seperator*#>>" + ""+ " <<*#tex_seperator*#>>"  + pkg + " <<*#tex_seperator*#>>"  \
            + docClass + " <<*#tex_seperator*#>>"+ bibStyle  + " <<*#tex_seperator*#>>" + \
            params  + " <<*#tex_seperator*#>>" + tocopy + ' '
            with open(filename, "w") as f:
                f.write(outtext)

            self.outtext = outtext
            self.parent.setData(outtext,filename)
            self.hide()





    def cancel(self):
        self.hide()